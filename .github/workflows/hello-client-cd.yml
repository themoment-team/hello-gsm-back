on:
  push:
    branches: [ master ]
    paths: 
        - 'apps/client/**'
        - '.github/**'


name: Hello_CLIENT_CD
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name : .env setting
      run: |
          touch .env
          echo "${{ secrets.DATA_FOR_ENV }}" >> .env
          cat .env
       
    - name: create-task-definition.json
      id: create-json-1
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "task-definition.json"
        json: ${{ secrets.CLIENT_TASK_DEFINITION }}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{secrets.AWS_ECR_REGISTRY}}
        ECR_REPOSITORY: hello-server
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY:$IMAGE_TAG -f ClientDockerfile .
        docker push $ECR_REGISTRY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: create-task-definition.json
      id: create-json-2
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "task-definition.json"
        json: ${{ secrets.CLIENT_TASK_DEFINITION }}

        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: hello-gsm-server-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: hello-gsm-ecs-service
        cluster: hello-gsm
        wait-for-service-stability: true
        
    - name: Hello, GSM Client Server CD Success!
      uses: sarisia/actions-status-discord@v1
      if: ${{ success() }}
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: Hello-GSM Server CD Success
        color: 49FF45

    - name: Hello, GSM Client Server CD Failed
      uses: sarisia/actions-status-discord@v1
      if: ${{ failure() }}
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: Hello-GSM Server CD Failed
        color: DC3545
