generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_idx         Int         @id @default(autoincrement())
  name             String      @db.VarChar(20)
  birth            DateTime    @db.Date
  gender           user_gender
  cellphone_number String      @db.VarChar(20)
}

model access_token_blacklist {
  user_idx     Int      @id
  access_token String   @db.VarChar(500)
  expired_date DateTime @default(dbgenerated("(current_timestamp() + interval 5 minute)")) @db.Timestamp(0)
}

model application {
  application_idx           Int                          @id @default(autoincrement())
  registration_number       Int?                         @unique(map: "application_registration_number_uindex") @db.SmallInt
  al_submission             Boolean?
  is_document_reception     Boolean?
  is_first_result           Boolean?
  is_final_result           Boolean?
  ID_photo_url              String                       @db.VarChar(500)
  guardian_name             String                       @db.VarChar(20)
  guardian_cellphone_number String                       @db.VarChar(20)
  teacher_name              String                       @db.VarChar(20)
  teacher_cellephone_number String                       @db.VarChar(20)
  school_location           String                       @db.VarChar(50)
  school_name               String                       @db.VarChar(50)
  screening                 application_screening
  social_screening          application_social_screening
  application_details       application_details?
}

model application_details {
  application_idx                   Int                                  @id
  address                           String                               @db.VarChar(50)
  telephone_number                  String                               @db.VarChar(20)
  guardian_relation                 String                               @db.VarChar(20)
  education_status                  application_details_education_status
  school_telephone_number           String                               @db.VarChar(20)
  score_1_1                         Int                                  @db.SmallInt
  score_1_2                         Int                                  @db.SmallInt
  score_2_1                         Int                                  @db.SmallInt
  score_2_2                         Int                                  @db.SmallInt
  score_3_1                         Int                                  @db.SmallInt
  general_curriculum_score_subtotal Int                                  @db.SmallInt
  art_sports_score                  Int                                  @db.SmallInt
  curriculum_score_subtotal         Int                                  @db.SmallInt
  attendance_score                  Int                                  @db.SmallInt
  volunteer_score                   Int                                  @db.SmallInt
  non_curriculum_score_subtotal     Int                                  @db.SmallInt
  score_total                       Int                                  @db.SmallInt
  first_wanted_major                Int                                  @db.SmallInt
  second_wanted_major               Int                                  @db.SmallInt
  application                       application                          @relation(fields: [application_idx], references: [application_idx], onDelete: Cascade, map: "application_details_application_application_idx_fk")
}

model refresh_token {
  user_idx      Int    @id
  refresh_token String @db.VarChar(500)
}

enum application_screening {
  normal
  society
  special
}

enum application_social_screening {
  equal_opportunity @map("equal opportunity")
  social_diversity @map("social diversity")
  NONE
}

enum application_details_education_status {
  planned
  graduation
  qualification_examination @map("qualification examination")
}

enum user_gender {
  M
  F
}
